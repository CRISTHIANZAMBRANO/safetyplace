import ts from 'typescript';
import { ConvertContext } from '../../../core/converters';
import { NamedConvertedItem } from '../../../core/converters/models';
import { NodeConverter } from '../../../core/converters/node.converter';
import { RegisteredReducerItem } from '../models/registered-reducer.model';
interface ReducerSearchItem {
    symbol?: ts.Symbol;
    registered?: RegisteredReducerItem[];
    callName?: string;
}
export declare class RegisterReducerCallConverter extends NodeConverter {
    convert(context: ConvertContext, storeModuleCall: ts.CallExpression): NamedConvertedItem | undefined;
    private createRegisteredReducer;
    private symbolFlagsToString;
    getReducer(context: ConvertContext, exp: ts.Node): ReducerSearchItem | undefined;
    private getReducerRecursive;
    private extractPropertyName;
    private extractCombineReducers;
    getStringValue(context: ConvertContext, exp: ts.Node): string | undefined;
}
export {};
