import { Observable } from 'rxjs';
import { ConvertedItem, NamedConvertedItem, TypeKind } from '../converters/models';
import { ItemRenderer } from './item.renderer';
export declare type RenderersMap = {
    [kind: number]: ItemRenderer;
};
export interface RenderResult {
    name: string;
    result: string;
}
export declare type ItemRenderedEventArg = {
    item: ConvertedItem;
    output: string;
};
export declare class Renderer {
    private itemRenderers;
    private itemFilter?;
    private itemRenderedSubject;
    private _onItemRendered;
    get onItemRendered(): Observable<ItemRenderedEventArg>;
    constructor(itemRenderers: {
        [kind: number]: RenderersMap;
    }, itemFilter?: ((item: ConvertedItem) => boolean) | undefined);
    render(collections: Map<TypeKind, NamedConvertedItem[]>): RenderResult[] | undefined;
    private renderItem;
    private renderRecursive;
    private randomName;
}
