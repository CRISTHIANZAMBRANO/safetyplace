"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionConvertContextFactory = void 0;
const typescript_1 = __importDefault(require("typescript"));
const type_kind_enum_1 = require("../../core/converters/models/type-kind.enum");
const item_convert_context_1 = require("./item-convert.context");
const call_expression_converter_1 = require("./node-converters/call-expression.converter");
const create_action_call_exp_converter_1 = require("./node-converters/create-action-call-exp.converter");
const create_reducer_call_exp_converter_1 = require("./node-converters/create-reducer-call-exp.converter");
const type_literal_converter_1 = require("./node-converters/type-literal.converter");
const type_reference_converter_1 = require("./node-converters/type-reference.converter");
const variable_declaration_converter_1 = require("./node-converters/variable-declaration.converter");
class ActionConvertContextFactory {
    create(program, typeChecker, converter, _lastContext) {
        this.configureConverter(converter);
        return new item_convert_context_1.ItemConvertContext('actions', program, typeChecker, converter, [type_kind_enum_1.TypeKind.Action, type_kind_enum_1.TypeKind.Reducer]);
    }
    configureConverter(converter) {
        converter.registerConverters({
            [type_kind_enum_1.TypeKind.VariableDeclaration]: [new variable_declaration_converter_1.VariableDeclarationConverter],
            [type_kind_enum_1.TypeKind.CallExpression]: [new create_action_call_exp_converter_1.CreateActionCallExpConverter, new create_reducer_call_exp_converter_1.CreateReducerCallExpConverter, new call_expression_converter_1.CallExpressionConverter],
            [type_kind_enum_1.TypeKind.TypeLiteral]: [new type_literal_converter_1.TypeLiteralConverter],
            [type_kind_enum_1.TypeKind.TypeReference]: [new type_reference_converter_1.TypeReferenceConverter]
        }, {});
        converter.nodeFilter = (node) => typescript_1.default.isVariableDeclaration(node);
    }
}
exports.ActionConvertContextFactory = ActionConvertContextFactory;
