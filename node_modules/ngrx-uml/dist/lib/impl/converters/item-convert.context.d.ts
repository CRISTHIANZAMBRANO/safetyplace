import { Program, Symbol, TypeChecker } from 'typescript';
import { ConvertContext } from '../../core/converters/convert.context';
import { Converter } from '../../core/converters/converter';
import { NamedConvertedItem } from '../../core/converters/models/converted-items/named-converted-item.model';
import { TypeKind } from '../../core/converters/models/type-kind.enum';
import { ItemWithSymbol } from '../models/item-with-symbol.model';
export declare class ItemConvertContext implements ConvertContext {
    name: string;
    program: Program;
    typeChecker: TypeChecker;
    converter: Converter;
    rootKinds: TypeKind[];
    private onFinish?;
    private result;
    constructor(name: string, program: Program, typeChecker: TypeChecker, converter: Converter, rootKinds: TypeKind[], lastContext?: ConvertContext, onFinish?: ((context: ItemConvertContext) => void) | undefined);
    finish(): void;
    getRawResult(): Map<TypeKind, Map<unknown, NamedConvertedItem>>;
    getResult(): Map<TypeKind, NamedConvertedItem[]> | undefined;
    addResult(itemWithSymbol: ItemWithSymbol): void;
    getItem<T extends NamedConvertedItem>(kind: TypeKind, symbol: Symbol): T | undefined;
    serializeResultToJson(parent?: {}): {
        kind: string;
        json: string;
    }[] | undefined;
    isRootKind(kind: TypeKind): boolean;
}
