"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionReferenceConvertContextFactory = void 0;
const chalk_1 = __importDefault(require("chalk"));
const loglevel_1 = __importDefault(require("loglevel"));
const type_kind_enum_1 = require("../../core/converters/models/type-kind.enum");
const item_convert_context_1 = require("./item-convert.context");
const action_reference_converter_1 = require("./node-converters/action-reference.converter");
class ActionReferenceConvertContextFactory {
    create(program, typeChecker, converter, lastContext) {
        this.configureConverter(converter);
        return new item_convert_context_1.ItemConvertContext('action-references', program, typeChecker, converter, [type_kind_enum_1.TypeKind.ActionReference], lastContext, this.onFinish);
    }
    configureConverter(converter) {
        const actionReferenceConverter = new action_reference_converter_1.ActionReferenceConverter();
        converter.registerConverters({
            [type_kind_enum_1.TypeKind.Identifier]: [actionReferenceConverter],
            [type_kind_enum_1.TypeKind.PropertyAccessExpression]: [actionReferenceConverter],
        }, { replace: true });
        converter.nodeFilter = undefined;
    }
    onFinish(context) {
        const result = context.getRawResult();
        // for (const [kind, map] of result.entries()) {
        //     log.info(`Found: ${map.size} ${TypeKind[kind]}s`);
        // }
        const actionsMap = result.get(type_kind_enum_1.TypeKind.Action);
        if (actionsMap) {
            const hasReferences = [...actionsMap.values()].some((a) => a.getChildren().length > 0);
            if (!hasReferences) {
                loglevel_1.default.warn(chalk_1.default.magenta('Did not find action\'s references. Check if correct ts-config file is specified!'));
            }
        }
    }
}
exports.ActionReferenceConvertContextFactory = ActionReferenceConvertContextFactory;
