import { ConvertedItem, TypeKind } from '../core/converters/models';
export declare function objectFlter<T>(key: string, value: T): T | undefined;
export declare function getKeyReplacer(keyToReplace: string): <T>(key: string, value: T) => T | undefined;
export declare function getKeysReplacer(keysToReplace: string[]): <T>(key: string, value: T) => T | undefined;
export declare function writeJsonToFile(data: unknown, outDir: string, fileName: string, replacer?: (key: string, value: any) => any): void;
export declare function writeToFile(content: string, outDir: string, fileName: string): string;
export declare function prepareTraceLogger(): void;
export declare function getFileName(filePath?: string): string | undefined;
export declare function printProgress(progress: string): void;
export declare function getCommandFilesExtensionsForEnvironment(): string[];
export declare function removeiIlegalCharacters(name: string, makeClickableInTerminal?: boolean): string;
export declare function serializeConvertedItemsMapToJson(map: Map<TypeKind, ConvertedItem[]> | undefined, parent?: {}, replacer?: ((this: unknown, key: string, value: unknown) => unknown) | undefined): {
    kind: string;
    json: string;
}[] | undefined;
declare const utils: {
    objectFlter: typeof objectFlter;
    getKeyReplacer: typeof getKeyReplacer;
    getKeysReplacer: typeof getKeysReplacer;
    writeJsonToFile: typeof writeJsonToFile;
    writeToFile: typeof writeToFile;
    prepareTraceLogger: typeof prepareTraceLogger;
    getFileName: typeof getFileName;
    printProgress: typeof printProgress;
    getCommandFilesExtensionsForEnvironment: typeof getCommandFilesExtensionsForEnvironment;
    removeiIlegalCharacters: typeof removeiIlegalCharacters;
    serializeConvertedItemsMapToJson: typeof serializeConvertedItemsMapToJson;
};
export default utils;
